Tackling Kerberous Busting:
Heres a short guide on how to tackle Kerberous Busting
**Please note that 
A.im not a professional and everything here should be verified :)
B.this guide aim to cover the vulnerabilitys this attack uses in order to prevent it, and has nothing to do with live threat or monitoring.

1. Check the Encryption Method:
The starting point for addressing Kerberos vulnerabilities is  first determining the encryption method.
Checking the encryption types is a good way to identify whether older, more vulnerable encryption methods are in use.

For this step, i suggest running the "KerberosBusting - Encryption Type detection" powershell script in this folder.

Estimated Cracking time for each encryption:

DES (des-cbc-md5, des-cbc-crc): considered insecure. 
ncrypted hashes can be cracked within hours, if not minutes.

RC4 (rc4-hmac): considered insecure. 
Kerberos ticket encrypted with this method using a weak password might be cracked within days or weeks with modern tools.

AES (aes128-cts-hmac-sha1-96, aes256-cts-hmac-sha1-96): considered secure. 
With a strong password, even the 128-bit version would likely take many years to centuries to crack with current technology. 

AES-256 (aes256-cts-hmac-sha1-96): onsidered one of the most secure encryption methods available.
Using the current technology, cracking AES-256 through brute force would take longer than the current age of the universe, even when using supercomputers.

Note - 
If a ticket is encrypted using AES-256, the primary concern isn't the encryption's strength but rather the security of the ticket-granting process, the password's complexity used, and potential vulnerabilities or misconfigurations in the Kerberos setup.

Triple DES (3DES): considered insecure. 
With dedicated hardware, a 3DES key can potentially be brute-forced in less than a day due to the "meet-in-the-middle" attack that effectively reduces its key size in half. 

Camellia: considered insecure. 
For the 256-bit version, it would take several millennia with current technology, assuming a strong password.

AES with Galois/Counter Mode (AES-GCM): considered secure when correctly implemented
Would be several millennia with current technology, assuming a strong password.

There might be more encryption type methods im unaware of and therefore didnt include.


2. Password Policies: 
Often, the strength of the encryption method can be negated if weak passwords are in use. Ensure that the domain has strong password policies. 
My suggestion for a secure password policy would be:

Minimum Length: 

At least 14 characters. The longer the password, the harder it is to crack through brute force.
***there's a particular characteristic of Windows Active Directory that makes it so the length of the password is related to the encryption type.
When a password exceeds 14 characters, Active Directory no longer stores the LM hash, leaving only the NTLM hash.
This is a positive from a security perspective because NTLM  is significantly more secure.

Complexity Requirements:
  
Uppercase Letters: At least one uppercase letter (A-Z).
Lowercase Letters: At least one lowercase letter (a-z).
Numbers: At least one digit (0-9).
Special Characters: At least one special character (e.g., !, @, #, $, %, etc.).
Avoid Common Words: Passwords shouldn't contain easily guessable words or patterns.

Password Expiry:
For any high privilege accounts i would suggest changing password every 30 days.

No Password Reuse: 
Users should be discouraged or prevented from reusing previous passwords. 
This can be enforced by maintaining a history of hashed passwords and checking new passwords against it.

Account Lockouts: 
After a certain number of failed login attempts (e.g., 5-10), temporarily lock out the account to prevent brute force attacks. 
However, this must be balanced to prevent denial-of-service attacks via account lockouts.

No Shared Accounts: 
Important accounts, especially those with elevated privileges, should never be shared among multiple users!
Every user should have a distinct login.
Sharing accounts can lead to many unwanted troubles.

No Default Passwords:
Any system or software defaults should be changed immediately upon installation or setup.

3. SPNS Targeting:
Kerberoasting often targets Service Accounts because they often have high privileges and their passwords don't expire regularly.
In order to combat this problem we will first need to understand about how many accounts were talking.
This can range from a few to hundreds depending on the organization stracture and needs.
For this step i suggest running the "Kerberos Busting - SPNs checking" powershell script in this folder
This script will provide a list of all existing SPNs Accounts.
After finding out with how many were dealing i suggest understanding which account belong to which service, and how to conduct password changes on regular basis without causing downtimes for that service.

4. Ticket Renewal and Expiry:
A big factor in Kerberos Busting is the length of the tgt validation.
The longer a ticket (TGT, specifically) is valid, the more time an attacker has to crack it. 
Therefore we should check the ticket renewal and expiry policies.
For this step i suggest running the "Kerberos Busting - TGT Policy" powershell script in the folder.
This script will provide you with the current tgt policy your domain is using.

After some reasearch the i suggest:
TGT Lifetime: Set to 10 hours or less.
TGT Renewal Time: 7 days.

Please note that the encryption type does effect the recommended time.
A strong encryption will take longer to crack therefore can allow a more loose policy.
And on the same note, theres a downside to shorter lifetimes.
It can and will cause a reduced user experience due to frequent re-authentication.

